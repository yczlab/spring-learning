AOP简介
    - Aop（Aspect-Oriented Programming，面向切面编程）：
      是一种新的方法论，是对传统OOP（Object-Oriented Programming，面向对象编程）的补充。
    - AOP主要编程对象是切面（aspect），而切面是横切关注点的模块化。
    - 在应用AOP编程时, 仍然需要定义公共功能, 但可以明确的定义这个功能在哪里, 以什么方式应用, 并且不必修改受影响的类。这样一来横切关注点就被模块化到特殊的对象(切面)里。
    - AOP的好处：
        1.每个事物逻辑位于一个位置，代码不分散，便于维护和升级
        2.业务模块更简洁，只包含核心业务代码


AOP相关术语
    - 横切关注点: 验证参数，日志(前置日志、后置日志)等。
    - 切面(Aspect):  横切关注点(跨越应用程序多个模块的功能)被模块化的特殊对象
    - 通知(Advice):  切面必须要完成的工作
    - 目标(Target): 被通知的对象
    - 代理(Proxy): 向目标对象应用通知之后创建的对象
    - 连接点（Joinpoint）: 程序执行的某个特定位置：如类某个方法调用前、调用后、方法抛出异常后等。
      连接点由两个信息确定：方法表示的程序执行点；相对点表示的方位。
      例如 ArithmethicCalculator#add() 方法执行前的连接点: 执行点为 ArithmethicCalculator#add()； 方位为该方法执行前的位置
    - 切点（pointcut）: 每个类都拥有多个连接点：例如 ArithmethicCalculator 的所有方法实际上都是连接点，即连接点是程序类中客观存在的事务。
      AOP通过切点定位到特定的连接点。类比：连接点相当于数据库中的记录，切点相当于查询条件。
      切点和连接点不是一对一的关系，一个切点匹配多个连接点，切点通过org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件。

一、基于AspectJ注解来使用Spring AOP
1、在Spring中启用AspectJ注解支持
    - 要在Spring应用中使用AspectJ注解,必须在classpath下包含AspectJ类库:aopalliance.jar、aspectj.weaver.jar和spring-aspects.jar
    - 要在Spring IOC容器中启用AspectJ注解支持,只要在Bean配置文件中定义一个空的XML元素<aop:aspectj-autoproxy>
    - 当Spring IOC容器侦测到Bean配置文件中的<aop:aspectj-autoproxy>元素时,会自动为与AspectJ切面匹配的Bean创建代理.

2、用AspectJ注解声明切面
    - 切面首先是一个IOC中的bean,即加入@Component注解
    - 要在Spring中声明AspectJ切面, 还需要加入@Aspect注解
      当在Spring IOC容器中初始化AspectJ切面之后,Spring IOC容器就会为那些与AspectJ切面相匹配的Bean创建代理.
    - 在AspectJ注解中,切面只是一个带有@Aspect注解的Java类.
    - 通知是切面中标注有某种注解的简单的Java方法.

3、AspectJ支持5种类型的通知注解:
    - @Before: 前置通知, 在方法执行之前执行
    - @After: 后置通知, 在方法执行之后执行
    - @AfterReturning: 返回通知, 在方法返回结果之后执行
    - @AfterThrowing: 异常通知, 在方法抛出异常之后
    - @Around: 环绕通知, 围绕着方法执行

4、编写AspectJ切入点表达式
    - execution * com.yczlab.spring.aop.impl.ArithmeticCalculator.*(..)
      匹配ArithmeticCalculator中声明的所有方法,第一个“*”代表任意修饰符以及任意返回值；
      第二个“*”代表任意方法；“..”匹配任意数量的参数. 若目标类、接口与该切面在同一个包中, 可以省略包名.
    - execution public * ArithmeticCalculator.*(..)
      匹配ArithmeticCalculator接口的所有公有方法.
    - execution public double ArithmeticCalculator.*(..)
      匹配ArithmeticCalculator中返回double类型数值的方法
    - execution public double ArithmeticCalculator.*(double, ..)
      匹配第一个参数为double类型的方法, “..”匹配任意数量任意类型的参数
    - execution public double ArithmeticCalculator.*(double, double)
      匹配参数类型为double,double类型的方法.

4、可以在通知方法中声明一个类型为JoinPoint的参数. 然后就能访问链接细节. 如方法名称和参数值.





